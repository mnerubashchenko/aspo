/* Листинг создания базы данных */
CREATE DATABASE RSSForVKR;
USE RSSForVKR;

CREATE TABLE BRANDS 
(ID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT newsequentialid(),
Name_brand VARCHAR(40) UNIQUE);

INSERT INTO BRANDS VALUES ('00000000-0000-0000-0000-000000000000', '---');

CREATE TABLE TYPEDEV 
(ID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT newsequentialid(),
Name_typedev VARCHAR(30) UNIQUE);

INSERT INTO TYPEDEV VALUES ('00000000-0000-0000-0000-000000000000', '---');

CREATE TABLE TYPEINTER 
(ID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT newsequentialid(),
Name_typeinter VARCHAR(30) UNIQUE);

INSERT INTO TYPEINTER VALUES ('00000000-0000-0000-0000-000000000000', '---');

CREATE TABLE INTERFACES
(ID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT newsequentialid(),
Name VARCHAR (30),
IsReadyStatus VARCHAR (30),
IsUsed VARCHAR (30),
SelectedPort VARCHAR (30),
Type UNIQUEIDENTIFIER FOREIGN KEY REFERENCES TYPEINTER(ID),
IpInput VARCHAR (30),
ActualIp VARCHAR (30));

CREATE TABLE DEVICES
(ID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT newsequentialid(),
Type UNIQUEIDENTIFIER FOREIGN KEY REFERENCES TYPEDEV(ID),
Caption VARCHAR(100),
Brand UNIQUEIDENTIFIER FOREIGN KEY REFERENCES BRANDS(ID),
Model VARCHAR (30),
Status VARCHAR (30),
IpInput VARCHAR (30),
ActualIp VARCHAR (30),
Port VARCHAR (30),
PositionNumber VARCHAR(10));

select * from TYPEMEASURE

select * from measure

INSERT INTO DEVICES(ID, Model) VALUES ('00000000-0000-0000-0000-000000000000', '---');

CREATE TABLE TYPEMEASURE 
(ID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT newsequentialid(),
Name_typemeasure VARCHAR (30) UNIQUE);

INSERT INTO TYPEMEASURE VALUES ('00000000-0000-0000-0000-000000000000', '---');

CREATE TABLE MEASURE
(ID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT newsequentialid(),
Grouup VARCHAR (30),
isParent VARCHAR(10),
id_measure VARCHAR (30),
parentId VARCHAR(30),
Name VARCHAR(30),
Caption VARCHAR(40),
MinValue INT,
MaxValue INT,
isCheck VARCHAR (30),
Status VARCHAR (30),
Type UNIQUEIDENTIFIER FOREIGN KEY REFERENCES TYPEMEASURE(ID),
Factor VARCHAR (10));

CREATE TABLE PROGRAMMCOMMANDS 
(ID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT newsequentialid(),
Name VARCHAR (30),
Code VARCHAR (30),
LongName VARCHAR(100),
Device VARCHAR(20));

CREATE TABLE TELEMETRY
(ID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT newsequentialid(),
hasItems VARCHAR(20),
parentId VARCHAR(20),
LongName VARCHAR (30),
ShortName VARCHAR (30),
ByteNumber INT,
StartBit INT,
Lenght INT,
PossibleValues VARCHAR (30),
Value VARCHAR(20));

CREATE TABLE ROLES 
(ID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT newsequentialid(),
Name_role VARCHAR (30) UNIQUE);

INSERT INTO ROLES VALUES ('00000000-0000-0000-0000-000000000000', '---');
INSERT INTO ROLES VALUES ('7dcb0637-af2c-4ae2-acf0-8413fe455402', 'Администратор');
INSERT INTO ROLES VALUES ('775ACD72-5459-EA11-B83A-645106511DF0', 'Гость');

CREATE TABLE POSTS
(ID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT newsequentialid(),
Name_post VARCHAR(30) UNIQUE);

INSERT INTO POSTS VALUES ('00000000-0000-0000-0000-000000000000', '---');

CREATE TABLE USERS 
(ID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT newsequentialid(),
Name_user VARCHAR (30),
Middlename_user VARCHAR (30),
Lastname_user VARCHAR (30),
Login_user VARCHAR(40) UNIQUE,
Password_user TEXT,
Post_user UNIQUEIDENTIFIER FOREIGN KEY REFERENCES POSTS(ID),
Role_user UNIQUEIDENTIFIER FOREIGN KEY REFERENCES ROLES(ID));

INSERT INTO USERS (ID, Middlename_user, Login_user) VALUES ('00000000-0000-0000-0000-000000000000', '---', '---');
INSERT INTO USERS (ID, Login_user) VALUES ('11111111-1111-1111-1111-111111111111', 'Пользователь удален');
INSERT INTO USERS (Login_user, Password_user, Role_user) VALUES ('admin', 'kavOk72+FgAcqkWq0Mosqw==CABgMHN0asS1KfpQ5RHdUGZ7eCF6lFawC9nWJt9sWWY=', '7dcb0637-af2c-4ae2-acf0-8413fe455402');

CREATE TABLE PROJECT 
(ID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT newsequentialid(),
Name_project VARCHAR (30),
Director_project UNIQUEIDENTIFIER FOREIGN KEY REFERENCES USERS(ID),
Description_project VARCHAR(200),
DateCreate_project DATETIME);

CREATE TABLE COMMENTS
(ID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT newsequentialid(),
Author_comment  UNIQUEIDENTIFIER FOREIGN KEY REFERENCES USERS(ID),
Project_comment UNIQUEIDENTIFIER FOREIGN KEY REFERENCES PROJECT(ID) ON DELETE CASCADE,
Body_comment VARCHAR(200),
DateCreate_comment DATETIME);

CREATE TABLE PROJECT_MEASURE 
(ID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT newsequentialid(),
ID_project UNIQUEIDENTIFIER FOREIGN KEY REFERENCES PROJECT(ID) ON DELETE CASCADE,
ID_measure UNIQUEIDENTIFIER FOREIGN KEY REFERENCES MEASURE(ID) ON DELETE CASCADE);

CREATE TABLE PROJECT_COMMAND
(ID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT newsequentialid(),
ID_project UNIQUEIDENTIFIER FOREIGN KEY REFERENCES PROJECT(ID) ON DELETE CASCADE,
ID_Command UNIQUEIDENTIFIER FOREIGN KEY REFERENCES PROGRAMMCOMMANDS(ID) ON DELETE CASCADE);

CREATE TABLE PROJECT_TELEMETRY
(ID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT newsequentialid(),
ID_project UNIQUEIDENTIFIER FOREIGN KEY REFERENCES PROJECT(ID) ON DELETE CASCADE,
ID_telemetry UNIQUEIDENTIFIER FOREIGN KEY REFERENCES TELEMETRY(ID) ON DELETE CASCADE);

CREATE TABLE PROJECT_DEVICE
(ID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT newsequentialid(),
ID_project UNIQUEIDENTIFIER FOREIGN KEY REFERENCES PROJECT(ID) ON DELETE CASCADE,
ID_device UNIQUEIDENTIFIER FOREIGN KEY REFERENCES DEVICES(ID) ON DELETE CASCADE);

CREATE TABLE PROJECT_INTERFACE
(ID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT newsequentialid(),
ID_project UNIQUEIDENTIFIER FOREIGN KEY REFERENCES PROJECT(ID) ON DELETE CASCADE,
ID_interface UNIQUEIDENTIFIER FOREIGN KEY REFERENCES INTERFACES(ID) ON DELETE CASCADE);

----------------------------------------------------------
CREATE TRIGGER posts_d ON POSTS
INSTEAD OF DELETE 
AS BEGIN
	DECLARE @idpost UNIQUEIDENTIFIER = (SELECT ID FROM deleted);

	UPDATE USERS SET Post_user = '00000000-0000-0000-0000-000000000000' WHERE Post_user = @idpost;

	DELETE POSTS WHERE ID = @idpost;
END

----------------------------------------------------------
CREATE TRIGGER roles_d ON ROLES
INSTEAD OF DELETE 
AS BEGIN
	DECLARE @idrole UNIQUEIDENTIFIER = (SELECT ID FROM deleted);

	UPDATE USERS SET Role_user = '00000000-0000-0000-0000-000000000000' WHERE Role_user = @idrole;

	DELETE ROLES WHERE ID = @idrole;
END


----------------------------------------------------------
CREATE TRIGGER users_d ON USERS
INSTEAD OF DELETE 
AS BEGIN
	DECLARE @iduser UNIQUEIDENTIFIER = (SELECT ID FROM deleted);

	UPDATE PROJECT SET Director_project = '00000000-0000-0000-0000-000000000000' WHERE Director_project = @iduser;
	UPDATE COMMENTS SET Author_comment = '11111111-1111-1111-1111-111111111111' WHERE Author_comment = @iduser;
 
	DELETE USERS WHERE ID = @iduser;
END

DROP TRIGGER users_d

----------------------------------------------------------
CREATE TRIGGER brands_d ON BRANDS
INSTEAD OF DELETE 
AS BEGIN
	DECLARE @idbrand UNIQUEIDENTIFIER = (SELECT ID FROM deleted);

	UPDATE DEVICES SET Brand = '00000000-0000-0000-0000-000000000000' WHERE Brand = @idbrand;

	DELETE BRANDS WHERE ID = @idbrand;
END

drop trigger brands_d

----------------------------------------------------------
CREATE TRIGGER typedev_d ON TYPEDEV
INSTEAD OF DELETE 
AS BEGIN
	DECLARE @idtypedev UNIQUEIDENTIFIER = (SELECT ID FROM deleted);

	UPDATE DEVICES SET Type = '00000000-0000-0000-0000-000000000000' WHERE Type = @idtypedev;

	DELETE TYPEDEV WHERE ID = @idtypedev;
END

drop trigger typedev_d

----------------------------------------------------------
CREATE TRIGGER typeinter_d ON TYPEINTER
INSTEAD OF DELETE 
AS BEGIN
	DECLARE @idtypeinter UNIQUEIDENTIFIER = (SELECT ID FROM deleted);

	UPDATE INTERFACES SET Type = '00000000-0000-0000-0000-000000000000' WHERE Type = @idtypeinter;

	DELETE TYPEINTER WHERE ID = @idtypeinter;
END

----------------------------------------------------------
CREATE TRIGGER typemeasure_d ON TYPEMEASURE
INSTEAD OF DELETE 
AS BEGIN
	DECLARE @idtypemeasure UNIQUEIDENTIFIER = (SELECT ID FROM deleted);

	UPDATE MEASURE SET Type = '00000000-0000-0000-0000-000000000000' WHERE Type = @idtypemeasure;

	DELETE TYPEMEASURE WHERE ID = @idtypemeasure;
END

------------------------------------------------------------
CREATE TRIGGER project_d ON PROJECT
INSTEAD OF DELETE 
AS BEGIN
	DECLARE @idproject UNIQUEIDENTIFIER = (SELECT ID FROM deleted);
	WHILE ((SELECT COUNT(*) FROM COMMENTS WHERE Project_comment = @idproject) > 0)
		BEGIN
			DELETE COMMENTS WHERE ID = (SELECT TOP(1) ID FROM COMMENTS WHERE Project_comment = @idproject);
		END;
	DELETE PROJECT WHERE ID = @idproject;
END

drop trigger project_d


create login RSSadmin with password = '#Qteltn3', DEFAULT_DATABASE = master, CHECK_EXPIRATION = OFF, CHECK_POLICY = OFF;

create user RSSadmin for login RSSadmin
